import os
import asyncio
import disnake
from disnake.ext import commands
from dotenv import load_dotenv
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = disnake.Intents.all()
bot = commands.Bot(
    command_prefix="*",  # –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥ –∑–∞–¥–∞—ë—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    intents=intents,
    help_command=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É help
)

# –°–æ–±—ã—Ç–∏–µ on_ready
@bot.event
async def on_ready():
    activity = disnake.Activity(
        type=disnake.ActivityType.watching,
        name="/help | –ü–∏–≤–Ω–∞—èüçª"
    )
    await bot.change_presence(status=disnake.Status.online, activity=activity)
    logger.info(f"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n"
                f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n"
                f"Name: {bot.user.name}#{bot.user.discriminator}\n"
                f"ID: {bot.user.id}\n"
                f"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {ctx.command}: {error}")
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
@bot.event
async def on_error(event, *args, **kwargs):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ {event}: {args}, {kwargs}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤
cogs = [
    "cogs.ping",  # /say
    "cogs.mute",  # /mute
    "cogs.unmute",  # /unmute
    "cogs.announce",  # /announce
    "cogs.info",  # /info
    "cogs.UserInfo",  # /user
    "cogs.clearchat",  # /clearchat
    "cogs.say",  # /say
    "cogs.ticket_system",  # /ticket
    "cogs.moder",  # /moder
    "cogs.randbuild",  # /randombuild
    "cogs.Roles",  # /Roles
    "cogs.Help",  # /help
    "cogs.Roll",  # /roll
    "cogs.avatar",  # /avatar
    # "cogs.warn",  # /warn
    # "cogs.warns",  # /warns
    "cogs.twitch_notifier",  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö
    "cogs.welcome",  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö
    "cogs.giveaway",  # —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    "cogs.private_voice"  # —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
]

for cog in cogs:
    try:
        bot.load_extension(cog)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–≥: {cog}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞ {cog}: {e}")

bot.run(os.getenv('DISCORD_BOT_TOKEN'))
