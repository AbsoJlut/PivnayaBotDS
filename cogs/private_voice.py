import os
import asyncio
import disnake
from disnake.ext import commands
from disnake.ui import Button, View, Select
import aiomysql
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
DB_HOST = os.getenv('MYSQL_HOST')
DB_USER = os.getenv('MYSQL_USER')
DB_PASSWORD = os.getenv('MYSQL_PASSWORD')
DB_NAME = os.getenv('MYSQL_DB_private_voice')
MUTE_ROLE_ID = int(os.getenv('MUTE_ROLE_ID'))  # ID —Ä–æ–ª–∏ –º—É—Ç–∞ –∏–∑ .env
ROLE_ID = int(os.getenv('ROLE_ID_DEFAULT'))  # ID —Ä–æ–ª–∏ –∏–∑ .env
CATEGORY_ID = int(os.getenv('CATEGORY_ID_PRIVATE_VOICE'))  # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ .env
JOIN_CHANNEL_ID = int(os.getenv('JOIN_CHANNEL_ID_PRIVATE_VOICE'))  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ .env

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def get_db_connection():
    return await aiomysql.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        db=DB_NAME,
        cursorclass=aiomysql.DictCursor
    )

class PrivateVoiceChannels(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.bot.loop.create_task(self.cleanup_channels_on_startup())

    async def cleanup_channels_on_startup(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –∫–∏–∫–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        await self.bot.wait_until_ready()  # –ñ–¥–µ–º, –ø–æ–∫–∞ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        active_channels = await self.get_active_channels()
        for channel_id in active_channels:
            channel = self.bot.get_channel(channel_id)
            if channel:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª
                try:
                    # –ö–∏–∫–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
                    for member in channel.members:
                        try:
                            await member.move_to(None)
                        except disnake.HTTPException as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.display_name}: {e}")
    
                    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
                    await channel.delete()
                    print(f"–ö–∞–Ω–∞–ª {channel.name} (ID: {channel.id}) —É–¥–∞–ª–µ–Ω.")
                except disnake.NotFound:
                    print(f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
                except disnake.HTTPException as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            connection = await get_db_connection()
            try:
                async with connection.cursor() as cursor:
                    sql = "DELETE FROM active_channels WHERE channel_voice = %s"
                    await cursor.execute(sql, (channel_id,))
                await connection.commit()
            except aiomysql.Error as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            finally:
                connection.close()
        print("–í—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∏–∫–Ω—É—Ç—ã.")

    async def get_active_channels(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        connection = await get_db_connection()
        try:
            async with connection.cursor() as cursor:
                sql = "SELECT channel_voice FROM active_channels"
                await cursor.execute(sql)
                result = await cursor.fetchall()
                return [row['channel_voice'] for row in result]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤
        finally:
            connection.close()

    async def create_private_channel(self, member):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."""
        guild = member.guild
        category = disnake.utils.get(guild.categories, id=CATEGORY_ID)
        if category is None:
            category = await guild.create_category(name='–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        role = guild.get_role(ROLE_ID)
        mute_role = guild.get_role(MUTE_ROLE_ID)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –º—É—Ç–∞
        
        overwrites = {
            guild.default_role: disnake.PermissionOverwrite(view_channel=False),
            role: disnake.PermissionOverwrite(connect=True, view_channel=True),
            mute_role: disnake.PermissionOverwrite(
                speak=False,              # –ó–∞–ø—Ä–µ—â–∞–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å
                send_messages=False,      # –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                embed_links=False         # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏
            ),
            member: disnake.PermissionOverwrite(
                view_channel=True,
                connect=True,
                speak=True,
                stream=True
            )
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        new_channel = await category.create_voice_channel(
            name=f'–ö–∞–Ω–∞–ª {member.display_name}',
            bitrate=64000,  # –ë–∏—Ç—Ä–µ–π—Ç
            user_limit=0,
            overwrites=overwrites
        )

        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
        await member.move_to(new_channel)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        connection = await get_db_connection()
        try:
            async with connection.cursor() as cursor:
                sql = "INSERT INTO active_channels (channel_voice, owner_id) VALUES (%s, %s)"
                await cursor.execute(sql, (new_channel.id, member.id))
            await connection.commit()
        finally:
            connection.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await self.update_panel(new_channel, member.id)

    async def update_panel(self, channel, owner_id):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        try:
            view = View(timeout=None)
            view.add_item(Button(label="", style=disnake.ButtonStyle.grey, custom_id=f"private_close_{channel.id}", emoji="üîí"))  # –ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª
            view.add_item(Button(label="", style=disnake.ButtonStyle.grey, custom_id=f"private_open_{channel.id}", emoji="üîì"))  # –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª
            view.add_item(Button(label="", style=disnake.ButtonStyle.grey, custom_id=f"private_add_limit_{channel.id}", emoji="‚ûï"))  # –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç
            view.add_item(Button(label="", style=disnake.ButtonStyle.grey, custom_id=f"private_remove_limit_{channel.id}", emoji="‚ûñ"))  # –£–º–µ–Ω—å—à–∏—Ç—å –ª–∏–º–∏—Ç
            view.add_item(Button(label="", style=disnake.ButtonStyle.grey, custom_id=f"private_change_name_{channel.id}", emoji="‚úèÔ∏è"))  # –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
            view.add_item(Button(label="", style=disnake.ButtonStyle.red, custom_id=f"private_kick_member_{channel.id}", emoji="üö™"))  # –ö–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            panel_message = await channel.send(embed=disnake.Embed(
                title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π',
                description='–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. \n üîí - –ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª \n üîì - –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª \n ‚ûï - –î–æ–±–∞–≤–∏—Ç—å 1 —Å–ª–æ—Ç \n ‚ûñ - –£–±—Ä–∞—Ç—å 1 —Å–ª–æ—Ç \n ‚úèÔ∏è - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ \n üö™ - –ò—Å–∫–ª—é—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞',
                color=disnake.Color.blue()
            ), view=view)

        except Exception as e:
            raise e

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        if not inter.component.custom_id or not inter.component.custom_id.startswith("private_"):
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ custom_id
        channel_id = int(inter.component.custom_id.split("_")[-1])
        channel = inter.guild.get_channel(channel_id)

        if not channel:
            await inter.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        owner_id = await self.get_channel_owner(channel_id)
        if inter.author.id != owner_id:
            await inter.response.send_message("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        if "private_close" in inter.component.custom_id:
            role = inter.guild.get_role(ROLE_ID)
            overwrites = channel.overwrites
            overwrites[role].update(connect=False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await channel.edit(overwrites=overwrites)
            await inter.response.send_message("–ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.", ephemeral=True)

        elif "private_open" in inter.component.custom_id:
            role = inter.guild.get_role(ROLE_ID)
            overwrites = channel.overwrites
            overwrites[role].update(connect=True)  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await channel.edit(overwrites=overwrites)
            await inter.response.send_message("–ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.", ephemeral=True)

        elif "private_add_limit" in inter.component.custom_id:
            current_limit = channel.user_limit
            new_limit = current_limit + 1 if current_limit < 99 else 99
            await channel.edit(user_limit=new_limit)
            await inter.response.send_message(f"–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {new_limit}.", ephemeral=True)

        elif "private_remove_limit" in inter.component.custom_id:
            current_limit = channel.user_limit
            new_limit = current_limit - 1 if current_limit > 0 else 0
            await channel.edit(user_limit=new_limit)
            await inter.response.send_message(f"–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–º–µ–Ω—å—à–µ–Ω –¥–æ {new_limit}.", ephemeral=True)

        elif "private_change_name" in inter.component.custom_id:
            await inter.response.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:", ephemeral=True)
            try:
                response = await self.bot.wait_for(
                    "message",
                    check=lambda m: m.author == inter.author and m.channel == inter.channel,
                    timeout=30
                )
                new_name = response.content
                await channel.edit(name=new_name)
                await inter.followup.send(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}", ephemeral=True)
            except asyncio.TimeoutError:
                await inter.followup.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", ephemeral=True)

        elif "private_kick_member" in inter.component.custom_id:
            members = [member for member in channel.members if not member.bot]
            if not members:
                await inter.response.send_message("–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∏–∫–∞.", ephemeral=True)
                return

            options = [disnake.SelectOption(label=member.display_name, value=str(member.id)) for member in members]
            select_menu = Select(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", options=options, custom_id="kick_member_select")

            view = View()
            view.add_item(select_menu)

            await inter.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–∏–∫–∞:", view=view, ephemeral=True)

            def check_select(i):
                return i.data['custom_id'] == "kick_member_select" and i.user.id == inter.author.id

            try:
                select_interaction = await self.bot.wait_for("dropdown", check=check_select, timeout=30)
                member_id = int(select_interaction.data['values'][0])
                member_to_kick = inter.guild.get_member(member_id)
                if member_to_kick:
                    await member_to_kick.move_to(None)
                    await select_interaction.response.send_message(f"{member_to_kick.display_name} –±—ã–ª –∫–∏–∫–Ω—É—Ç.", ephemeral=True)
            except asyncio.TimeoutError:
                await inter.followup.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", ephemeral=True)

    async def get_channel_owner(self, channel_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        connection = await get_db_connection()
        try:
            async with connection.cursor() as cursor:
                sql = "SELECT owner_id FROM active_channels WHERE channel_voice = %s"
                await cursor.execute(sql, (channel_id,))
                result = await cursor.fetchone()
                return result['owner_id'] if result else None
        finally:
            connection.close()

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç."""
        if before.channel is not None:
            active_channels = await self.get_active_channels()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if before.channel.id in active_channels:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                if len(before.channel.members) == 0:
                    await before.channel.delete()

                    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    connection = await get_db_connection()
                    try:
                        async with connection.cursor() as cursor:
                            sql = "DELETE FROM active_channels WHERE channel_voice = %s"
                            await cursor.execute(sql, (before.channel.id,))
                        await connection.commit()
                    finally:
                        connection.close()

        if after.channel is not None and after.channel.id == JOIN_CHANNEL_ID:
            await self.create_private_channel(member)

def setup(bot):
    bot.add_cog(PrivateVoiceChannels(bot))
